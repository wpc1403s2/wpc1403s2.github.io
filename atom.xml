<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>apollo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hopejiu.me/"/>
  <updated>2017-03-13T13:00:51.002Z</updated>
  <id>http://hopejiu.me/</id>
  
  <author>
    <name>wpc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初学Ajax</title>
    <link href="http://hopejiu.me/2017/03/13/%E5%88%9D%E5%AD%A6Ajax/"/>
    <id>http://hopejiu.me/2017/03/13/初学Ajax/</id>
    <published>2017-03-13T13:00:16.000Z</published>
    <updated>2017-03-13T13:00:51.002Z</updated>
    
    <content type="html"><![CDATA[<p>##1.封装ajax<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/*1创建xhr对象*/</div><div class="line">function createXhr() &#123;</div><div class="line">    var xhr = null;</div><div class="line">    if (XMLHttpRequest) &#123;</div><div class="line">        xhr = new XMLHttpRequest();</div><div class="line">    &#125;else&#123;</div><div class="line">        //兼容IE6以前的老IE</div><div class="line">        xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">    &#125;</div><div class="line">    return xhr;</div><div class="line">&#125;</div><div class="line">function ajax(info) &#123;</div><div class="line">    var xhr=createXhr();</div><div class="line">    var type,async;</div><div class="line">    type=info.type==&quot;post&quot;?&quot;post&quot;:&quot;get&quot;;</div><div class="line">    async=info.async==&quot;true&quot;?&quot;true&quot;:&quot;false&quot;;</div><div class="line">    xhr.open(type,info.url,async);</div><div class="line">    if (type == &quot;post&quot;) &#123;</div><div class="line">        xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">    &#125;</div><div class="line">    xhr.onreadystatechange=function () &#123;</div><div class="line">        if(xhr.readyState==4)&#123;</div><div class="line">            if(xhr.status==200)&#123;</div><div class="line">                info.success(xhr.responseText)</div><div class="line">            &#125;else&#123;</div><div class="line">                info.error();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.send(info.data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##2.使用ajax<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">btn.onclick=function () &#123;</div><div class="line">                ajax(&#123;</div><div class="line">                    type:&apos;get&apos;,</div><div class="line">                    url:&apos;php/01-gettime.php&apos;,</div><div class="line">                    async:&apos;true&apos;,</div><div class="line">                    success:function (a) &#123;</div><div class="line">                        time.innerHTML=a;</div><div class="line">                    &#125;,</div><div class="line">                    error:function () &#123;</div><div class="line">                        alert(&apos;错误&apos;)</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div></pre></td></tr></table></figure></p>
<p>##使用jquery ajax()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(&quot;#btn&quot;).click(function () &#123;</div><div class="line">                $.ajax(&#123;</div><div class="line">                    url:&quot;php/04-hw.php&quot;,</div><div class="line">                    dataType:&quot;text&quot;,</div><div class="line">                    type:&apos;get&apos;,</div><div class="line">                    success:function (data) &#123;</div><div class="line">                        alert(data);</div><div class="line">                    &#125;,</div><div class="line">                    error:function () &#123;</div><div class="line">                        alert(&apos;error&apos;)</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li>dataType参数<ul>
<li>xml”: 返回 XML 文档，可用 jQuery 处理。</li>
<li>“html”: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</li>
<li>“script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）</li>
<li>“json”: 返回 JSON 数据 。</li>
<li>“jsonp”: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</li>
<li>text”: 返回纯文本字符串</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##1.封装ajax&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular</title>
    <link href="http://hopejiu.me/2017/03/04/second/"/>
    <id>http://hopejiu.me/2017/03/04/second/</id>
    <published>2017-03-04T06:58:37.000Z</published>
    <updated>2017-03-04T07:01:07.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><ul>
<li>在线编辑器<ul>
<li><a href="http://codepen.io/" target="_blank" rel="external">http://codepen.io/</a></li>
<li><a href="https://jsfiddle.net/" target="_blank" rel="external">https://jsfiddle.net/</a></li>
</ul>
</li>
</ul>
<h2 id="Angular-简介"><a href="#Angular-简介" class="headerlink" title="Angular 简介"></a>Angular 简介</h2><h3 id="什么是-AngularJS"><a href="#什么是-AngularJS" class="headerlink" title="什么是 AngularJS"></a>什么是 AngularJS</h3><ul>
<li>一款非常优秀的前端高级 JS 框架</li>
<li>最早由 Misko Hevery 等人创建</li>
<li>2009 年被 Google 公式收购，用于其多款产品</li>
<li>目前有一个全职的开发团队继续开发和维护这个库</li>
<li>有了这一类框架就可以轻松构建 SPA 应用程序</li>
<li>轻松构建 SPA（单一页面应用程序）</li>
<li>单一页面应用程序：<ul>
<li>只有一个页面（整个应用的一个载体）</li>
<li>内容全部是由AJAX方式呈现出啦的</li>
</ul>
</li>
<li>其核心就是通过指令扩展了 HTML，通过表达式绑定数据到 HTML。</li>
</ul>
<h3 id="为什么使用-AngularJS"><a href="#为什么使用-AngularJS" class="headerlink" title="为什么使用 AngularJS"></a>为什么使用 AngularJS</h3><ul>
<li>更少的代码，实现更强劲的功能</li>
<li>将一些以前在后台开发中使用的思想带入前端开发</li>
<li>带领当前市面上的框架走向模式化或者架构化</li>
</ul>
<h3 id="AngularJS-的核心特性"><a href="#AngularJS-的核心特性" class="headerlink" title="AngularJS 的核心特性"></a>AngularJS 的核心特性</h3><ul>
<li>MVC</li>
<li>模块化</li>
<li>自动化双向数据绑定</li>
<li>指令系统</li>
</ul>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul>
<li><a href="http://www.apjs.net/" target="_blank" rel="external">http://www.apjs.net/</a></li>
<li><a href="http://www.angularjs.cn/" target="_blank" rel="external">http://www.angularjs.cn/</a></li>
<li><a href="http://docs.angularjs.cn/api" target="_blank" rel="external">http://docs.angularjs.cn/api</a></li>
<li><a href="https://material.angularjs.org" target="_blank" rel="external">https://material.angularjs.org</a></li>
<li><a href="http://angular-ui.github.io/" target="_blank" rel="external">http://angular-ui.github.io/</a></li>
</ul>
<h2 id="Angular-上手"><a href="#Angular-上手" class="headerlink" title="Angular 上手"></a>Angular 上手</h2><h3 id="安装-Angular"><a href="#安装-Angular" class="headerlink" title="安装 Angular"></a>安装 Angular</h3><ul>
<li>下载 Angular.js 的包<ul>
<li><a href="https://github.com/angular/angular.js/releases" target="_blank" rel="external">https://github.com/angular/angular.js/releases</a></li>
</ul>
</li>
<li>使用 CDN 上的 Angular.js<ul>
<li><a href="http://apps.bdimg.com/libs/angular.js/1.4.9/angular.min.js" target="_blank" rel="external">http://apps.bdimg.com/libs/angular.js/1.4.9/angular.min.js</a></li>
</ul>
</li>
<li><p>使用 Bower 安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install angular</div></pre></td></tr></table></figure>
</li>
<li><p>使用 NPM 安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install angular</div></pre></td></tr></table></figure>
</li>
<li><p>每种方式安装包，本质都是将angular的库下载到当前文件夹中</p>
</li>
</ul>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<ul>
<li><p>angular中最重要的概念是指令（directive）</p>
</li>
<li><p>ng-model 是双向数据绑定的指令，效果就是将当前元素的value属性和模型中的user.name建立绑定关系</p>
</li>
<li><p>JS: BOM DOM ES</p>
</li>
</ul>
<h3 id="分析-Angular-示例"><a href="#分析-Angular-示例" class="headerlink" title="分析 Angular 示例"></a>分析 Angular 示例</h3><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><h3 id="运行官方文档"><a href="#运行官方文档" class="headerlink" title="运行官方文档"></a>运行官方文档</h3><h2 id="CDN的优势"><a href="#CDN的优势" class="headerlink" title="CDN的优势"></a>CDN的优势</h2><p>Content Dev</p>
<ul>
<li>快</li>
<li>节省自己服务器的带宽压力和流量</li>
</ul>
<h2 id="Angular-基础概念"><a href="#Angular-基础概念" class="headerlink" title="Angular 基础概念"></a>Angular 基础概念</h2><h3 id="MVC-思想"><a href="#MVC-思想" class="headerlink" title="MVC 思想"></a>MVC 思想</h3><h4 id="什么是-MVC-思想"><a href="#什么是-MVC-思想" class="headerlink" title="什么是 MVC 思想"></a>什么是 MVC 思想</h4><ul>
<li>将应用程序的组成划分为三个部分：Model View Controller</li>
<li>控制器的作用就是初始化模型用的；</li>
<li>模型就是用于存储数据的</li>
<li>视图用于展现数据</li>
</ul>
<ul>
<li>登陆案例</li>
<li>模型<ul>
<li>我们数据库中所有用户的信息</li>
<li>接受控制器传来的用户名和密码进行校验的业务逻辑并返回true/false</li>
</ul>
</li>
<li>控制器<ul>
<li>接受用户在界面上填写的用户名和密码</li>
<li>将用户名和密码交给模型</li>
</ul>
</li>
<li>视图<ul>
<li>给用户呈现一个表单</li>
<li>接受用户输入内容，并将其提交给控制器</li>
<li>根据控制器返回的数据，响应用户页面</li>
</ul>
</li>
</ul>
<h3 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h3><ul>
<li>划分应用程序结构</li>
<li>我们可以通过angular.module创建一个模块</li>
<li>angular.module方法传递两个参数才是创建模块，一个参数是获取模块</li>
</ul>
<h3 id="控制器（Controller）"><a href="#控制器（Controller）" class="headerlink" title="控制器（Controller）"></a>控制器（Controller）</h3><ul>
<li>通过$scope和视图关联</li>
<li></li>
</ul>
<h3 id="视图模型（-scope）"><a href="#视图模型（-scope）" class="headerlink" title="视图模型（$scope）"></a>视图模型（$scope）</h3><h3 id="表达式（Expression）"><a href="#表达式（Expression）" class="headerlink" title="表达式（Expression）"></a>表达式（Expression）</h3><h3 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h3><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><h2 id="Angular-指令系统"><a href="#Angular-指令系统" class="headerlink" title="Angular 指令系统"></a>Angular 指令系统</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐工具&quot;&gt;&lt;a href=&quot;#推荐工具&quot; class=&quot;headerlink&quot; title=&quot;推荐工具&quot;&gt;&lt;/a&gt;推荐工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在线编辑器&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/&quot; target=&quot;_blan
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>构建前端自动化工作流环境</title>
    <link href="http://hopejiu.me/2017/03/04/fitst-article/"/>
    <id>http://hopejiu.me/2017/03/04/fitst-article/</id>
    <published>2017-03-04T04:23:37.000Z</published>
    <updated>2017-03-04T04:24:38.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流行框架第一天：构建前端自动化工作流环境"><a href="#流行框架第一天：构建前端自动化工作流环境" class="headerlink" title="流行框架第一天：构建前端自动化工作流环境"></a>流行框架第一天：构建前端自动化工作流环境</h1><h2 id="兩個問題"><a href="#兩個問題" class="headerlink" title="兩個問題"></a>兩個問題</h2><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li>了解什么是Node，什么是NPM；（Node.js）</li>
<li>掌握Bower的使用；</li>
<li>熟练使用Less/Sass；</li>
<li>搭建一个自己的自动化工作流环境；<ul>
<li>自动编译</li>
<li>自动合并</li>
<li>自动刷新</li>
<li>自动部署</li>
</ul>
</li>
<li>GIT 与 GITHUB<ul>
<li>master 托管源文件</li>
<li>gh-pages 托管部署文件</li>
<li>在github搭建自己的blog</li>
</ul>
</li>
</ul>
<h2 id="为什么要有自动化的流程"><a href="#为什么要有自动化的流程" class="headerlink" title="为什么要有自动化的流程"></a>为什么要有自动化的流程</h2><ul>
<li>在我们的开发过程中有大量的重复操作</li>
<li>DRY  Don’t repeat yourself</li>
<li><p>开发人员的精力应放在哪？创造，新的一切</p>
</li>
<li><p>前端开发的编译操作</p>
</li>
</ul>
<h2 id="1-Node环境"><a href="#1-Node环境" class="headerlink" title="1.Node环境"></a>1.Node环境</h2><h3 id="1-1-什么是Node"><a href="#1-1-什么是Node" class="headerlink" title="1.1.什么是Node"></a>1.1.什么是Node</h3><ul>
<li>Node.js 可能类似jquery.js</li>
<li>不是JS文件，也不是一个JS框架（）</li>
<li>而是Server side Javascript runtime, 服务端的一个JS运行时</li>
<li>我们可以在NODE运行JS代码</li>
<li>alert();ECMAScript  JS- ES  BOM  DOM</li>
<li>node中只能运行ECMAScript，无法使用 BOM 和 DOM</li>
<li>目前我们的JS是运行在浏览器内核中</li>
<li>PHP是什么？是一门脚本语言也是一个运行环境</li>
<li><p>为什么Node选中了JS，</p>
</li>
<li><p>说到底就是一个JS运行环境</p>
</li>
<li><p>目前有两个分支</p>
<ul>
<li>Node.js 0.12.7 官方版本 要求尽善尽美</li>
<li>IO.js 是社区的产物，不是官方的东西，io.js有很多新特性，迭代非常快，社区推进非常快</li>
<li>15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了</li>
<li>node 5.x == io.js</li>
<li>node 4.0 == node</li>
</ul>
</li>
</ul>
<h3 id="1-2-Node环境搭建"><a href="#1-2-Node环境搭建" class="headerlink" title="1.2.Node环境搭建"></a>1.2.Node环境搭建</h3><h4 id="1-2-1-Mac"><a href="#1-2-1-Mac" class="headerlink" title="1.2.1.Mac"></a>1.2.1.Mac</h4><ul>
<li>安装包的方式<ul>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0.pkg" target="_blank" rel="external">pkg</a></li>
</ul>
</li>
<li><p>NVM（Node Version Manager）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'. ~/.nvm/nvm.sh'</span> &gt;&gt; .bash_profile</div><div class="line">$ nvm install stable</div><div class="line">$ nvm <span class="built_in">alias</span> default stable</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="1-2-2-Windows"><a href="#1-2-2-Windows" class="headerlink" title="1.2.2.Windows"></a>1.2.2.Windows</h4><ul>
<li>安装包的方式<ul>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0-x64.msi" target="_blank" rel="external">msi_x64</a></li>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0-x86.msi" target="_blank" rel="external">msi_x86</a></li>
</ul>
</li>
<li>NVM（Node Version Manager）</li>
<li>nvm(node version manager)</li>
<li>因为NODE版本比较多，开发人员可能依赖很多版本</li>
<li><p>通过NVM，可以轻松切换于不同的版本之间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>
</li>
</ul>
<p>NVM_HOME=C:\Develop\nvm</p>
<p>NVM_SYMLINK=C:\Develop\nodejs</p>
<p>NPM_HOME=C:\Develop\nvm\npm</p>
<p>PATH=%NVM_HOME%;%NVM_SYMLINK%;%NPM_HOME%</p>
<h4 id="1-2-3-环境变量"><a href="#1-2-3-环境变量" class="headerlink" title="1.2.3.环境变量"></a>1.2.3.环境变量</h4><ul>
<li><p>环境变量就是操作系统提供的系统级别用于存储变量的地方</p>
</li>
<li><p>系统变量和用户变量</p>
</li>
<li>系统变量指的是所用当前系统用户共享的变量</li>
<li>自己的电脑一般只有一个用户</li>
<li><p>建议将自己配置的环境变量放在用户变量中，用户变量比较干净</p>
</li>
<li><p>环境变量的变量名是不区分大小写的</p>
</li>
<li><p>变量间运行相互引用</p>
</li>
<li><p>特殊值：</p>
</li>
<li>PATH变量（不区分大小写）</li>
<li>PATH 相当于一个路径的引用</li>
<li><p>只要添加到PATH变量中的路径，都可以在任何目录下搜索</p>
</li>
<li><p>命令行</p>
</li>
<li>可以用来执行当前目录下的文件</li>
<li>命令</li>
</ul>
<p>cd :change directory</p>
<ul>
<li>Node.js是一个轻内核（本身没有什么功能）的东东，所有的功能都要功能包提供</li>
<li>node官方提供了一些最基础的包</li>
</ul>
<h3 id="1-3-Node用途"><a href="#1-3-Node用途" class="headerlink" title="1.3.Node用途"></a>1.3.Node用途</h3><h4 id="REPL环境（控制台环境）"><a href="#REPL环境（控制台环境）" class="headerlink" title="REPL环境（控制台环境）"></a>REPL环境（控制台环境）</h4><h4 id="1-3-1-开发Web应用程序"><a href="#1-3-1-开发Web应用程序" class="headerlink" title="1.3.1.开发Web应用程序"></a>1.3.1.开发Web应用程序</h4><ul>
<li>做动态网站</li>
<li>开发提供数据的服务端API</li>
</ul>
<h4 id="1-3-2-前端开发工具基础"><a href="#1-3-2-前端开发工具基础" class="headerlink" title="1.3.2.前端开发工具基础"></a>1.3.2.前端开发工具基础</h4><ul>
<li>Node.js给前端乃至整个开发行业带来一场工业革命</li>
<li>刀跟火种</li>
</ul>
<h3 id="1-4-Node开发Web应用Demo"><a href="#1-4-Node开发Web应用Demo" class="headerlink" title="1.4.Node开发Web应用Demo"></a>1.4.Node开发Web应用Demo</h3><h4 id="1-4-1-复习请求与响应"><a href="#1-4-1-复习请求与响应" class="headerlink" title="1.4.1.复习请求与响应"></a>1.4.1.复习请求与响应</h4><p>客户端发送到服务端的东西称之为请求报文<br>服务端返回给客户端的东西称之为响应报文</p>
<h3 id="1-5-NPM"><a href="#1-5-NPM" class="headerlink" title="1.5.NPM"></a>1.5.NPM</h3><h4 id="1-5-1-什么是NPM"><a href="#1-5-1-什么是NPM" class="headerlink" title="1.5.1.什么是NPM"></a>1.5.1.什么是NPM</h4><p><a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p>
<ul>
<li>Node Package Manager</li>
<li>Node应用程序依赖包的管理工具</li>
<li>安装卸载更新之类的操作</li>
</ul>
<h4 id="1-5-2-为什么使用NPM"><a href="#1-5-2-为什么使用NPM" class="headerlink" title="1.5.2.为什么使用NPM"></a>1.5.2.为什么使用NPM</h4><ul>
<li>包很多</li>
<li>场景：我需要用一个A，A依赖B，B依赖C</li>
<li>常见的包管理工具都有循环依赖的功能</li>
<li>你只需记住你要什么东西</li>
</ul>
<h4 id="1-5-3-常见的NPM操作"><a href="#1-5-3-常见的NPM操作" class="headerlink" title="1.5.3.常见的NPM操作"></a>1.5.3.常见的NPM操作</h4><p>// 安装一个包，默认安装最新稳定版本<br>npm install package_name<br>// –save<br>// 初始化操作，给项目添加一个配置文件<br>npm init<br>// –yes参数走默认配置</p>
<ul>
<li>如果官方数据源太慢使用</li>
<li><a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></li>
</ul>
<hr>
<h2 id="2-Bower"><a href="#2-Bower" class="headerlink" title="2.Bower"></a>2.Bower</h2><h3 id="2-1-什么是Bower"><a href="#2-1-什么是Bower" class="headerlink" title="2.1.什么是Bower"></a>2.1.什么是Bower</h3><ul>
<li><a href="http://bower.io/" target="_blank" rel="external">官网</a></li>
<li>web应用程序依赖项管理工具</li>
</ul>
<h3 id="2-2-为什么使用Bower"><a href="#2-2-为什么使用Bower" class="headerlink" title="2.2.为什么使用Bower"></a>2.2.为什么使用Bower</h3><ul>
<li>方便便捷的方式管理包，zhuangbi</li>
</ul>
<h3 id="2-3-Bower实践"><a href="#2-3-Bower实践" class="headerlink" title="2.3.Bower实践"></a>2.3.Bower实践</h3><ul>
<li><p>npm install -g bower // -g:global</p>
</li>
<li><p>修改npm全局路径，就是在用户目录下添加.npmrc文件</p>
</li>
</ul>
<hr>
<h2 id="3-Sass-LESS"><a href="#3-Sass-LESS" class="headerlink" title="3.Sass/LESS"></a>3.Sass/LESS</h2><hr>
<h2 id="4-Gulp"><a href="#4-Gulp" class="headerlink" title="4.Gulp"></a>4.Gulp</h2><h3 id="4-1-Gulp简介"><a href="#4-1-Gulp简介" class="headerlink" title="4.1.Gulp简介"></a>4.1.Gulp简介</h3><ul>
<li>链接：<ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">中文网</a></li>
</ul>
</li>
<li>就是用来机械化的完成重复性质的工作</li>
<li>gulp的机制就是将重复工作抽象成一个个的任务，</li>
</ul>
<h3 id="4-2-Gulp准备工作"><a href="#4-2-Gulp准备工作" class="headerlink" title="4.2.Gulp准备工作"></a>4.2.Gulp准备工作</h3><ul>
<li>安装Node.js</li>
<li>安装 gulp 命令行工具<ul>
<li><code>npm install -g gulp</code></li>
</ul>
</li>
<li>初始化 gulp 项目</li>
<li>创建任务 - gulpfile.js</li>
</ul>
<h3 id="4-3-基本使用"><a href="#4-3-基本使用" class="headerlink" title="4.3.基本使用"></a>4.3.基本使用</h3><h3 id="4-4-常用插件"><a href="#4-4-常用插件" class="headerlink" title="4.4.常用插件"></a>4.4.常用插件</h3><ul>
<li><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">编译 Less：gulp-less</a></li>
<li><a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">创建本地服务器：gulp-connect</a></li>
<li><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">合并文件：gulp-concat</a></li>
<li><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">最小化 js 文件：gulp-uglify</a></li>
<li><a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="external">重命名文件：gulp-rename</a></li>
<li><a href="https://www.npmjs.com/package/gulp-minify-css" target="_blank" rel="external">最小化 css 文件：gulp-minify-css</a></li>
<li><a href="https://www.npmjs.com/package/gulp-minify-html" target="_blank" rel="external">压缩html文件 gulp-minify-html</a></li>
<li><a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external">最小化图像：gulp-imagemin</a></li>
</ul>
<hr>
<h2 id="5-Git"><a href="#5-Git" class="headerlink" title="5.Git"></a>5.Git</h2><h3 id="5-1-什么是GIT，什么是GITHUB"><a href="#5-1-什么是GIT，什么是GITHUB" class="headerlink" title="5.1.什么是GIT，什么是GITHUB"></a>5.1.什么是GIT，什么是GITHUB</h3><ul>
<li>GIT</li>
<li>GITHUB</li>
</ul>
<h3 id="5-2-环境安装"><a href="#5-2-环境安装" class="headerlink" title="5.2.环境安装"></a>5.2.环境安装</h3><h3 id="5-3-GIT常用命令"><a href="#5-3-GIT常用命令" class="headerlink" title="5.3.GIT常用命令"></a>5.3.GIT常用命令</h3><hr>
<h2 id="6-Markdown"><a href="#6-Markdown" class="headerlink" title="6.Markdown"></a>6.Markdown</h2><p><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">https://guides.github.com/features/mastering-markdown/</a><br><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">https://help.github.com/articles/github-flavored-markdown/</a><br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">https://help.github.com/articles/markdown-basics/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;流行框架第一天：构建前端自动化工作流环境&quot;&gt;&lt;a href=&quot;#流行框架第一天：构建前端自动化工作流环境&quot; class=&quot;headerlink&quot; title=&quot;流行框架第一天：构建前端自动化工作流环境&quot;&gt;&lt;/a&gt;流行框架第一天：构建前端自动化工作流环境&lt;/h1&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hopejiu.me/2017/03/04/hello-world/"/>
    <id>http://hopejiu.me/2017/03/04/hello-world/</id>
    <published>2017-03-04T03:28:57.385Z</published>
    <updated>2017-03-04T03:28:57.385Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
